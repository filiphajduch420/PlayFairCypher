# Form implementation generated from reading ui file 'playfair_GUI.ui'
#
# Created by: PyQt6 UI code generator 6.5.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtGui import QFont, QFontDatabase

# PUVODNI FUNKCE

alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
diacritics = ["Ě", "Š", "Č", "Ř", "Ž", "Ý", "Á", "Í", "É", "Ů", "Ú", "Ť", "Ď", "Ó", "Ň"]
without_diacritics = ["E", "S", "C", "R", "Z", "Y", "A", "I", "E", "U", "U", "T", "D", "O", "N"]


# nahrazení čísel
def replaceNumbers(text):
    number_table = {
        '0': 'QABQ',
        '1': 'QBAQ',
        '2': 'QABY',
        '3': 'YABQ',
        '4': 'YABY',
        '5': 'YBAY',
        '6': 'XABY',
        '7': 'XABX',
        '8': 'YABX',
        '9': 'XBAX'
    }
    replaced_text = ""

    for char in text:
        if char.isdigit():
            replaced_text += number_table[char]
        else:
            replaced_text += char

    return replaced_text


# nahrazení 4znaků za čísla pro dešifrování
def replaceNumbersDecrypt(text):
    number_table = {
        'QABQ': '0',
        'QBAQ': '1',
        'QABY': '2',
        'YABQ': '3',
        'YABY': '4',
        'YBAY': '5',
        'XABY': '6',
        'XABX': '7',
        'YABX': '8',
        'XBAX': '9'
    }
    replaced_text = ""

    i = 0
    while i < len(text):
        substring = text[i:i + 4]
        if substring in number_table:
            replaced_text += number_table[substring]
            i += 4
        else:
            replaced_text += text[i]
            i += 1

    return replaced_text


# Filtrace otevrenho textu
def filtrationOpenText(text, czechEncoding=True):
    text = replaceNumbers(text)
    result = ""
    text = text.upper().replace(" ", "XMEZERAX")

    if czechEncoding:
        text = text.replace("W", "V")
    else:
        text = text.replace("J", "I")

    for char in text:
        if char in diacritics:
            index = diacritics.index(char)
            result += without_diacritics[index]
        elif char in alphabet:
            result += char

    filtered_text = ""
    i = 0
    while i < len(result):
        if i < len(result) - 1:
            if result[i] == result[i + 1]:
                # Když není dvojice tvořena z X tak se přidá XQZ, jinak se přidá QYZ
                if result[i] != 'Q':
                    filtered_text += result[i] + 'QYZ'
                    i += 1
                else:
                    filtered_text += result[i] + 'XQZ'
                    i += 1
            else:
                filtered_text += result[i] + result[i + 1]
                i += 2
        else:
            filtered_text += result[i]
            i += 1

    # Přídání QYZ na konec, pokud text končí na X
    if len(filtered_text) % 2 == 1 and filtered_text[-1] == 'X':
        filtered_text += 'QYZ'
    # Přídání XQZ na konec, pokud text lichý a nekoční na X
    if len(filtered_text) % 2 == 1 and filtered_text[-1] != 'X':
        filtered_text += 'XQZ'

    return ' '.join([filtered_text[i:i + 2] for i in range(0, len(filtered_text), 2)])


# Filtrace klice
def filtrationKey(key, czechEncoding=True):
    result = ""
    key = key.upper()
    if czechEncoding:
        key = key.replace("W", "V")
    else:
        key = key.replace("J", "I")

    for char in key:
        if char in diacritics:
            index = diacritics.index(char)
            result += without_diacritics[index]
        elif char in alphabet:
            result += char
    return result


def playfairMatrix(key, czechEncoding=True):
    # Příprava klíče
    key = filtrationKey(key)

    # Kontrola minimální délky klíče
    if len(key) < 5:
        raise ValueError("Klíč musí mít alespoň 5 znaků.")

    # Vytvoření maticové reprezentace klíče (5x5 matice)
    matrix = [['' for _ in range(5)] for _ in range(5)]
    used_chars = set()

    i, j = 0, 0
    for char in key:
        char = char.upper()
        if char.isalpha() and char not in used_chars:
            matrix[i][j] = char
            used_chars.add(char)
            j += 1
            if j == 5:
                j = 0
                i += 1

    for char in alphabet:
        char = char.upper()
        if czechEncoding:
            if char != "W" and char not in used_chars:
                matrix[i][j] = char
                used_chars.add(char)
                j += 1
                if j == 5:
                    j = 0
                    i += 1
        else:
            if char != "J" and char not in used_chars:
                matrix[i][j] = char
                used_chars.add(char)
                j += 1
                if j == 5:
                    j = 0
                    i += 1

    return matrix


def printMatrix(matrix):
    formatted_matrix = "\n".join([" ".join(row) for row in matrix])
    return formatted_matrix


def encryptPlayfair(key, text, czechEncoding=True):
    # Filtrace klíče a vytvoření maticové reprezentace
    key = filtrationKey(key, czechEncoding)
    matrix = playfairMatrix(key, czechEncoding)

    # Filtrace otevřeného textu
    filtrovany_text = filtrationOpenText(text, czechEncoding)

    # Rozdělení textu na dvojice
    pairs = filtrovany_text.split()

    encrypted_text = ""

    for pair in pairs:
        if len(pair) == 2:
            row1, col1 = -1, -1
            row2, col2 = -1, -1

            # Nalezení pozice písmen v matici
            for i in range(5):
                for j in range(5):
                    if matrix[i][j] == pair[0]:
                        row1, col1 = i, j
                    if matrix[i][j] == pair[1]:
                        row2, col2 = i, j

            # Šifrování páru
            if row1 == row2:  # Písmena leží ve stejném řádku
                col1 = (col1 + 1) % 5
                col2 = (col2 + 1) % 5
            elif col1 == col2:  # Písmena leží ve stejném sloupci
                row1 = (row1 + 1) % 5
                row2 = (row2 + 1) % 5
            else:
                col1, col2 = col2, col1

            encrypted_pair = matrix[row1][col1] + matrix[row2][col2]
            encrypted_text += encrypted_pair  # Přidání zašifrovaného páru do výsledného textu

        else:
            encrypted_text += pair  # Pokud není pár, ponechat nezměněný

    return addSpace(encrypted_text)


# funcke pro dodeli mezer po 5 znacich
def addSpace(input_string):
    result = [input_string[i:i + 5] for i in range(0, len(input_string), 5)]
    return ' '.join(result)


def decryptPlayfair(key, encryptedText, czechEncoding=True):
    encryptedText = encryptedText.replace(" ", "")

    # Filtrace klíče a vytvoření maticové reprezentace
    key = filtrationKey(key, czechEncoding)
    matrix = playfairMatrix(key, czechEncoding)

    # Filtrace otevřeného textu
    filtrovany_text = filtrationOpenText(encryptedText, czechEncoding)

    # Rozdělení textu na dvojice
    pairs = filtrovany_text.split()

    decrypted_text = ""

    for pair in pairs:
        if len(pair) == 2:
            row1, col1 = -1, -1
            row2, col2 = -1, -1

            # Nalezení pozice písmen v matici
            for i in range(5):
                for j in range(5):
                    if matrix[i][j] == pair[0]:
                        row1, col1 = i, j
                    if matrix[i][j] == pair[1]:
                        row2, col2 = i, j

            # Dešifrování páru
            if row1 == row2:  # Písmena leží ve stejném řádku
                col1 = (col1 - 1) % 5
                col2 = (col2 - 1) % 5
            elif col1 == col2:  # Písmena leží ve stejném sloupci
                row1 = (row1 - 1) % 5
                row2 = (row2 - 1) % 5
            else:
                col1, col2 = col2, col1

            decrypted_pair = matrix[row1][col1] + matrix[row2][col2]
            decrypted_text += decrypted_pair  # Přidání dešifrovaného páru do výsledného textu

        else:
            decrypted_text += pair  # Pokud není pár, ponechat nezměněný

    # Aplikace filtrace na dešifrovaný text
    decrypted_text = decrypted_text.replace("XMEZERAX", " ").replace("QYZ", "").replace("XQZ", "")

    decrypted_text = replaceNumbersDecrypt(decrypted_text)

    return decrypted_text  # Vrácení dešifrovaného textu s aplikovanou filtrací


"""
GUI
"""


# Form implementation generated from reading ui file 'playfair_GUI.ui'
#
# Created by: PyQt6 UI code generator 6.5.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1080, 630)
        self.widget = QtWidgets.QWidget(parent=Dialog)
        self.widget.setGeometry(QtCore.QRect(-11, -1, 1100, 700))
        self.widget.setStyleSheet(
            "QWidget#widget{background-color:qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(220, "
            "134, 124, 255), stop:1 rgba(255, 229, 136, 255));}\n"
            "\n"
            "\n"
            "")
        self.widget.setObjectName("widget")
        self.label = QtWidgets.QLabel(parent=self.widget)
        self.label.setGeometry(QtCore.QRect(10, 0, 1082, 51))
        self.label.setStyleSheet("font: 600 30pt \"Raleway\";")
        self.label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(parent=self.widget)
        self.label_2.setGeometry(QtCore.QRect(50, 60, 311, 31))
        self.label_2.setStyleSheet("font: 500 30pt \"Arial\";")
        self.label_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.text_sifrovani = QtWidgets.QTextEdit(parent=self.widget)
        self.text_sifrovani.setGeometry(QtCore.QRect(50, 100, 311, 81))
        self.text_sifrovani.setStyleSheet("QTextEdit{\n"
                                          "background-color:rgb(255, 255, 255);\n"
                                          "font: 18pt \"Raleway\"; background-color: white;\n"
                                          "color: black;\n"
                                          "border-radius: 15px;\n"
                                          "border: 2px solid rgba(255, 96, 109, 0.7);\n"
                                          "padding-left:5px;\n"
                                          "padding-top:5px;\n"
                                          "}\n"
                                          "\n"
                                          "QTextEdit:focus{\n"
                                          "border: 2px solid rgb(165, 8, 0);\n"
                                          "\n"
                                          "}\n"
                                          "")
        self.text_sifrovani.setObjectName("text_sifrovani")
        self.encrypt = QtWidgets.QPushButton(parent=self.widget)
        self.encrypt.setGeometry(QtCore.QRect(130, 210, 141, 51))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.encrypt.sizePolicy().hasHeightForWidth())
        self.encrypt.setSizePolicy(sizePolicy)
        self.encrypt.setStyleSheet("QPushButton#encrypt{\n"
                                   "background-color:rgba(255, 96, 109, 0.7);\n"
                                   "font: 600 25pt \"Raleway\";\n"
                                   "border-radius: 15px;\n"
                                   "}\n"
                                   "\n"
                                   "QPushButton#encrypt:hover{\n"
                                   "background-color:rgb(165, 8, 0);\n"
                                   "font: 700 26pt \"Raleway\";\n"
                                   "}\n"
                                   "\n"
                                   "QPushButton#encrypt:pressed{\n"
                                   "font: 600 24pt \"Raleway\";\n"
                                   "}\n"
                                   "\n"
                                   "\n"
                                   "")
        self.encrypt.setObjectName("encrypt")
        self.label_3 = QtWidgets.QLabel(parent=self.widget)
        self.label_3.setGeometry(QtCore.QRect(50, 300, 311, 41))
        self.label_3.setStyleSheet("font: 500 30pt \"Raleway\";")
        self.label_3.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.filtrText = QtWidgets.QTextEdit(parent=self.widget)
        self.filtrText.setGeometry(QtCore.QRect(50, 340, 311, 81))
        self.filtrText.setStyleSheet("QTextEdit{\n"
                                     "background-color:rgb(255, 255, 255);\n"
                                     "font: 18pt \"Raleway\"; background-color: white;\n"
                                     "color: black;\n"
                                     "border-radius: 15px;\n"
                                     "border: 2px solid rgba(255, 96, 109, 0.7);\n"
                                     "padding-left:5px;\n"
                                     "padding-top:5px;\n"
                                     "}\n"
                                     "\n"
                                     "QTextEdit:focus{\n"
                                     "border: 2px solid rgb(165, 8, 0);\n"
                                     "\n"
                                     "}\n"
                                     "")
        self.filtrText.setReadOnly(True)
        self.filtrText.setAcceptRichText(False)
        self.filtrText.setObjectName("filtrText")
        self.label_4 = QtWidgets.QLabel(parent=self.widget)
        self.label_4.setGeometry(QtCore.QRect(50, 460, 311, 41))
        self.label_4.setStyleSheet("font: 500 30pt \"Raleway\";")
        self.label_4.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.encryptedText = QtWidgets.QTextEdit(parent=self.widget)
        self.encryptedText.setGeometry(QtCore.QRect(50, 500, 311, 81))
        self.encryptedText.setStyleSheet("QTextEdit{\n"
                                         "background-color:rgb(255, 255, 255);\n"
                                         "font: 18pt \"Raleway\"; background-color: white;\n"
                                         "color: black;\n"
                                         "border-radius: 15px;\n"
                                         "border: 2px solid rgba(255, 96, 109, 0.7);\n"
                                         "padding-left:5px;\n"
                                         "padding-top:5px;\n"
                                         "}\n"
                                         "\n"
                                         "QTextEdit:focus{\n"
                                         "border: 2px solid rgb(165, 8, 0);\n"
                                         "\n"
                                         "}\n"
                                         "")
        self.encryptedText.setReadOnly(True)
        self.encryptedText.setObjectName("encryptedText")
        self.label_5 = QtWidgets.QLabel(parent=self.widget)
        self.label_5.setGeometry(QtCore.QRect(10, 80, 1081, 31))
        self.label_5.setStyleSheet("font: 500 30pt \"Raleway\";")
        self.label_5.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.klic = QtWidgets.QLineEdit(parent=self.widget)
        self.klic.setGeometry(QtCore.QRect(460, 120, 201, 41))
        self.klic.setStyleSheet("QLineEdit{\n"
                                "background-color:rgb(255, 255, 255);\n"
                                "font: 18pt \"Raleway\"; background-color: white;\n"
                                "color: black;\n"
                                "border-radius: 15px;\n"
                                "border: 2px solid rgba(255, 96, 109, 0.7);\n"
                                "}\n"
                                "\n"
                                "QLineEdit:focus{\n"
                                "border: 2px solid rgb(165, 8, 0);\n"
                                "\n"
                                "}\n"
                                "")
        self.klic.setInputMask("")
        self.klic.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.klic.setObjectName("klic")
        self.label_8 = QtWidgets.QLabel(parent=self.widget)
        self.label_8.setGeometry(QtCore.QRect(740, 60, 311, 31))
        self.label_8.setStyleSheet("font: 500 30pt \"Arial\";")
        self.label_8.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.text_desifrovani = QtWidgets.QTextEdit(parent=self.widget)
        self.text_desifrovani.setGeometry(QtCore.QRect(740, 100, 311, 81))
        self.text_desifrovani.setStyleSheet("QTextEdit{\n"
                                            "background-color:rgb(255, 255, 255);\n"
                                            "font: 18pt \"Raleway\"; background-color: white;\n"
                                            "color: black;\n"
                                            "border-radius: 15px;\n"
                                            "border: 2px solid rgba(255, 96, 109, 0.7);\n"
                                            "padding-left:5px;\n"
                                            "padding-top:5px;\n"
                                            "}\n"
                                            "\n"
                                            "QTextEdit:focus{\n"
                                            "border: 2px solid rgb(165, 8, 0);\n"
                                            "\n"
                                            "}\n"
                                            "")
        self.text_desifrovani.setObjectName("text_desifrovani")
        self.label_23 = QtWidgets.QLabel(parent=self.widget)
        self.label_23.setGeometry(QtCore.QRect(740, 300, 311, 41))
        self.label_23.setStyleSheet("font: 500 30pt \"Raleway\";")
        self.label_23.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_23.setObjectName("label_23")
        self.decryptedText = QtWidgets.QTextEdit(parent=self.widget)
        self.decryptedText.setGeometry(QtCore.QRect(740, 340, 311, 81))
        self.decryptedText.setStyleSheet("QTextEdit{\n"
                                         "background-color:rgb(255, 255, 255);\n"
                                         "font: 18pt \"Raleway\"; background-color: white;\n"
                                         "color: black;\n"
                                         "border-radius: 15px;\n"
                                         "border: 2px solid rgba(255, 96, 109, 0.7);\n"
                                         "padding-left:5px;\n"
                                         "padding-top:5px;\n"
                                         "}\n"
                                         "\n"
                                         "QTextEdit:focus{\n"
                                         "border: 2px solid rgb(165, 8, 0);\n"
                                         "\n"
                                         "}\n"
                                         "")
        self.decryptedText.setReadOnly(True)
        self.decryptedText.setObjectName("decryptedText")
        self.decrypt = QtWidgets.QPushButton(parent=self.widget)
        self.decrypt.setGeometry(QtCore.QRect(830, 210, 141, 51))
        self.decrypt.setStyleSheet("QPushButton#decrypt{\n"
                                   "background-color:rgba(255, 96, 109, 0.7);\n"
                                   "font: 600 25pt \"Raleway\";\n"
                                   "border-radius: 15px;\n"
                                   "}\n"
                                   "\n"
                                   "QPushButton#decrypt:hover{\n"
                                   "background-color:rgb(165, 8, 0);\n"
                                   "font: 700 26pt \"Raleway\";\n"
                                   "}\n"
                                   "\n"
                                   "QPushButton#decrypt:pressed{\n"
                                   "font: 600 24pt \"Raleway\";\n"
                                   "}\n"
                                   "")
        self.decrypt.setObjectName("decrypt")
        self.matrix = QtWidgets.QTableView(parent=self.widget)
        self.matrix.setGeometry(QtCore.QRect(430, 360, 256, 192))
        self.matrix.setStyleSheet("QTableView\n"
                                  "{\n"
                                  "background-color:rgb(255, 255, 255);\n"
                                  "font: 18pt \"Raleway\"; background-color: white;\n"
                                  "color: black;\n"
                                  "border-radius: 15px;\n"
                                  "border: 2px solid rgba(255, 96, 109, 0.7);\n"
                                  "padding-left:5px;\n"
                                  "padding-top:5px;\n"
                                  "padding-right:5px;\n"
                                  "padding-bottom:5px;\n"
                                  "}\n"
                                  "\n"
                                  "QTableView:focus{\n"
                                  "border: 2px solid rgb(165, 8, 0);\n"
                                  "\n"
                                  "}")
        self.matrix.setObjectName("matrix")
        self.matrix.horizontalHeader().setVisible(False)
        self.matrix.horizontalHeader().setHighlightSections(False)
        self.matrix.verticalHeader().setVisible(False)
        self.matrix.verticalHeader().setHighlightSections(False)
        self.radioButtonCS = QtWidgets.QRadioButton(parent=self.widget)
        self.radioButtonCS.setGeometry(QtCore.QRect(460, 240, 91, 30))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.radioButtonCS.setFont(font)
        self.radioButtonCS.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.DefaultContextMenu)
        self.radioButtonCS.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.radioButtonCS.setStyleSheet("QRadioButton {\n"
                                         "    color:                  white;\n"
                                         "}\n"
                                         "\n"
                                         "QRadioButton::indicator {\n"
                                         "    width:                  15px;\n"
                                         "    height:                 15px;\n"
                                         "    border-radius:          9px;\n"
                                         "}\n"
                                         "\n"
                                         "QRadioButton::indicator:checked {\n"
                                         "    background-color:       rgb(165, 8, 0);\n"
                                         "    border:                 2px solid white;\n"
                                         "}\n"
                                         "\n"
                                         "QRadioButton::indicator:unchecked {\n"
                                         "   \n"
                                         "    border:                 2px solid white;\n"
                                         "}")
        self.radioButtonCS.setIconSize(QtCore.QSize(21, 21))
        self.radioButtonCS.setChecked(True)
        self.radioButtonCS.setObjectName("radioButtonCS")
        self.label_6 = QtWidgets.QLabel(parent=self.widget)
        self.label_6.setGeometry(QtCore.QRect(460, 190, 201, 31))
        self.label_6.setStyleSheet("font: 500 30pt \"Raleway\";")
        self.label_6.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.radioButtonEN = QtWidgets.QRadioButton(parent=self.widget)
        self.radioButtonEN.setGeometry(QtCore.QRect(570, 240, 91, 30))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.radioButtonEN.setFont(font)
        self.radioButtonEN.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.DefaultContextMenu)
        self.radioButtonEN.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.radioButtonEN.setAutoFillBackground(False)
        self.radioButtonEN.setStyleSheet("QRadioButton {\n"
                                         "    color:                  white;\n"
                                         "}\n"
                                         "\n"
                                         "QRadioButton::indicator {\n"
                                         "    width:                  15px;\n"
                                         "    height:                 15px;\n"
                                         "    border-radius:          9px;\n"
                                         "}\n"
                                         "\n"
                                         "QRadioButton::indicator:checked {\n"
                                         "    background-color:       rgb(165, 8, 0);\n"
                                         "    border:                 2px solid white;\n"
                                         "}\n"
                                         "\n"
                                         "QRadioButton::indicator:unchecked {\n"
                                         "   \n"
                                         "    border:                 2px solid white;\n"
                                         "}")
        self.radioButtonEN.setIconSize(QtCore.QSize(21, 21))
        self.radioButtonEN.setChecked(False)
        self.radioButtonEN.setObjectName("radioButtonEN")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "PLAYFAIR"))
        self.label.setText(_translate("Dialog", "PlayFair"))
        self.label_2.setText(_translate("Dialog", "Šifrování"))
        self.text_sifrovani.setPlaceholderText(_translate("Dialog", "Zadejte text k šifrování..."))
        self.encrypt.setText(_translate("Dialog", "Zašifrovat"))
        self.label_3.setText(_translate("Dialog", "Filtrovaný text"))
        self.label_4.setText(_translate("Dialog", "Zašifrovaný text"))
        self.label_5.setText(_translate("Dialog", "Klíč"))
        self.label_8.setText(_translate("Dialog", "Dešifrování"))
        self.text_desifrovani.setPlaceholderText(_translate("Dialog", "Zadejte text k dešifrování..."))
        self.label_23.setText(_translate("Dialog", "Dešifrovaný text"))
        self.decrypt.setText(_translate("Dialog", "Dešifrovat"))
        self.radioButtonCS.setText(_translate("Dialog", "CS"))
        self.label_6.setText(_translate("Dialog", "Kódování"))
        self.radioButtonEN.setText(_translate("Dialog", "EN"))

        self.encrypt.clicked.connect(self.encryptTextGUI)
        self.decrypt.clicked.connect(self.decryptTextGUI)

    def encryptTextGUI(self):
        text = self.text_sifrovani.toPlainText()
        key = self.klic.text()
        czechEncoding = self.radioButtonCS.isChecked()

        try:
            encryptedText = encryptPlayfair(key, text, czechEncoding)
            filteredText = filtrationOpenText(text, czechEncoding)
            self.filtrText.setText(filteredText)
            self.encryptedText.setText(encryptedText)

            # Vytvoření matice
            matrix = playfairMatrix(key, czechEncoding)
            self.matrix_data = matrix
            self.updateMatrixView(matrix)

        except ValueError as e:
            QtWidgets.QMessageBox.critical(Dialog, "Error", str(e))

    def decryptTextGUI(self):
        encryptedText = self.text_desifrovani.toPlainText()
        key = self.klic.text()
        czechEncoding = self.radioButtonCS.isChecked()

        try:
            decryptedText = decryptPlayfair(key, encryptedText, czechEncoding)
            self.decryptedText.setText(decryptedText)

            # Vytvoření matice
            matrix = playfairMatrix(key, czechEncoding)
            self.matrix_data = matrix
            self.updateMatrixView(matrix)

        except ValueError as e:
            QtWidgets.QMessageBox.critical(Dialog, "Error", str(e))

    def updateMatrixView(self, matrix):
        model = QtGui.QStandardItemModel(len(matrix), len(matrix[0]))

        for row_idx, row in enumerate(matrix):
            for col_idx, value in enumerate(row):
                item = QtGui.QStandardItem(value)

                # Nastavení textu doprostřed
                item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)

                model.setItem(row_idx, col_idx, item)

        self.matrix.setModel(model)

        # Nastavení aby byl text přes celou QTableView
        self.matrix.setSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)

        self.matrix.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)

        self.matrix.verticalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    QFontDatabase.addApplicationFont("Raleway-VariableFont_wght.ttf")
    font = QFont("Raleway")
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec())